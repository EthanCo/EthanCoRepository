/*

异常体系：
--------| Throwable  所有错误或者异常的父类
--------------| Error（错误） //错误一般由jvm或者硬件引发的问题，所有我们一般不会通过代码去处理错误
--------------| Exception(异常) 异常一般都通过代码处理 

------------------| 运行时异常: 如果一个方法内部抛出了一个运行时异常，那么方法上 可以声明也可以不 声明，调用者可以以处理也可以不处理。
------------------| 编译时异常(非运行时异常、受检异常):  如果一个方法内部抛出了一个编译时异常对象，那么方法上就必须要声明，而且调用者也必须要处理。

运行时异常： RuntimeException以及RuntimeException子类 都是属于运行时异常。

编译时异常： 除了运行时异常就是编译异常。


疑问： 为什么java编译器会如此严格要求编译时异常，对运行时异常如此宽松？

	运行时异常都是可以通过程序员良好的编程习惯去避免，所以java编译器就没有严格要求处理运行时异常。
*/

/*
如何区分错误和异常？
	如果程序出现了不正常的信息，如果不正常的信息的类名是以Error结尾的，那么肯定是一个错误。
	如果是以Exception结尾的，那么肯定是一个异常。
*/

Throwable常用方法
	toString() 返回当前异常对象的完整类名+病态信息
	getMessage() 返回创建Throwable传入的字符串信息
	printStackTrace() 打印异常的栈信息